# Sets

## Overview

A Set is a data structure in Python that looks very similar to a list or array. In contrast to other structures in Python though, the order of items within a set is irrelevant to the functionality. Python lists or stacks can have multiple duplicate values where 
stacks can only have unique values. This makes it easier to identify elements within a set because we can user operations to find and edit elements with a high degree of efficiency. Sets are capable of storing multiple types of data
 including strings, ints, or booleans.

## Key Terms
- Set: A data structure which is defined by characteristics of being unordered and containing no duplicate values.
- Hashing: The process by which items within a set can be access and modified by a defined index location.
- Hashing Function: The function that assigns items to a numerical index within a set.
- Sparse List: A set which is not completely filled.
- Open Addressing/Chaining: Operations to resolve conflicts when managing a set.

## Comparisons

Sets share components with multiple other data structures in Python. the most obvious comparison is to a list. The structure appears similar but a set cannot have duplicates and the order of items is irrelevant. This is because we don't access items in a set by index 
but by looking for the element itself. Dictionaries are ordered and can be changed unlike sets but also do not allow duplicates just like sets. Dictionaries can also hold multiple types of data. We can also access items in a dictionary by referencing the key value pair we want without having to search each element of the dictionary 
giving it an O(1) efficiency.
```python
# List
my_list = [1, 5, 4, 2, 2, 3]   # Duplicate values are allowed in lists
item = my_list[1]   # Element accessed by index
```
```python
my_dict = {"first: 1, "second": 2, "third": 3}   # No duplicate keys
item = my_dict["first"}   # Access items by referencing the key:value pair
```

```python
thisset = {"grape", "banana", "cherry", 4, 2}   # No specific order
if "apple" in thisset:  # Check if item is in the list without an index
	print("apple")
else:
	print("no")
```

## Hashing

Achieving O(1) efficiency is a great attribute of utilizing sets in your programming. As an example, 
